//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace KazatanGames.LD53
{
    public partial class @GameControlsInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControlsInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Drone Flying"",
            ""id"": ""0ceba3c2-9124-4c28-9838-41c3396ffc23"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""44054905-7c5d-4836-8bcb-b043c96285ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""600ab231-ee55-42c4-916e-306b572de1a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""e79bb0d5-496b-4c2b-a1d6-799c3e7b1353"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9a05f5bf-a620-4cd4-a719-67300cb6beb9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c5031ce7-13c1-455d-acb3-de35b6f8633d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b079c758-b008-4e94-a985-1534725f951d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6d03e7e0-2fc9-44c5-a526-b56ecae45c7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a761f77f-4192-4740-866d-97311b62af74"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4f5d76c9-6ae5-4688-a299-dbadcc9d6d8c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ab98189-fd8a-4088-9771-8a40445a965d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Drone Flying
            m_DroneFlying = asset.FindActionMap("Drone Flying", throwIfNotFound: true);
            m_DroneFlying_Movement = m_DroneFlying.FindAction("Movement", throwIfNotFound: true);
            m_DroneFlying_Fire = m_DroneFlying.FindAction("Fire", throwIfNotFound: true);
            m_DroneFlying_Aiming = m_DroneFlying.FindAction("Aiming", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Drone Flying
        private readonly InputActionMap m_DroneFlying;
        private IDroneFlyingActions m_DroneFlyingActionsCallbackInterface;
        private readonly InputAction m_DroneFlying_Movement;
        private readonly InputAction m_DroneFlying_Fire;
        private readonly InputAction m_DroneFlying_Aiming;
        public struct DroneFlyingActions
        {
            private @GameControlsInputActions m_Wrapper;
            public DroneFlyingActions(@GameControlsInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_DroneFlying_Movement;
            public InputAction @Fire => m_Wrapper.m_DroneFlying_Fire;
            public InputAction @Aiming => m_Wrapper.m_DroneFlying_Aiming;
            public InputActionMap Get() { return m_Wrapper.m_DroneFlying; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DroneFlyingActions set) { return set.Get(); }
            public void SetCallbacks(IDroneFlyingActions instance)
            {
                if (m_Wrapper.m_DroneFlyingActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnMovement;
                    @Fire.started -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnFire;
                    @Fire.performed -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnFire;
                    @Fire.canceled -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnFire;
                    @Aiming.started -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnAiming;
                    @Aiming.performed -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnAiming;
                    @Aiming.canceled -= m_Wrapper.m_DroneFlyingActionsCallbackInterface.OnAiming;
                }
                m_Wrapper.m_DroneFlyingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Fire.started += instance.OnFire;
                    @Fire.performed += instance.OnFire;
                    @Fire.canceled += instance.OnFire;
                    @Aiming.started += instance.OnAiming;
                    @Aiming.performed += instance.OnAiming;
                    @Aiming.canceled += instance.OnAiming;
                }
            }
        }
        public DroneFlyingActions @DroneFlying => new DroneFlyingActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IDroneFlyingActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnAiming(InputAction.CallbackContext context);
        }
    }
}
